// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "./utility.cginc"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> DirectIllumination;
RWTexture2D<float4> IndirectIllumination;
RWTexture2D<float4> GbufferAlbedo;
RWTexture2D<float4> GbufferPosition;
RWTexture2D<float4> GbufferNormal;
RWTexture2D<float4> GbufferMotion;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4x4 _LastVP;

// skybox
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
int _SkyboxEnabled;
int need_gbuffer;

// random jitter for TAA
float2 _JitterOffset;
int _MaxReflections;

int focal_length;
float aperture_radius;
// lighting 
//float4 _DirectionalLight;
/*==========RNG============*/
float2 pixel;
float _Seed;

// uint rng_state;
float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}


struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
    float3 invDir;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    ray.invDir = 1.0f / direction;
    return ray;
}


//  ref: https://www.shadertoy.com/view/4djSRW
float hash12(float2 p)
{
	float3 p3  = frac(float3(p.xyx) * .1031f);
    p3 += dot(p3, p3.yzx + 33.33f);
    return frac((p3.x + p3.y) * p3.z);
}

// ref: http://corysimon.github.io/articles/uniformdistn-on-sphere/
float3 SampleHemisphere(float3 normal)
{
    // Uniformly sample hemisphere direction
    float cosTheta = rand();
    float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return normalize(mul(tangentSpaceDir, GetTangentSpace(normal)));
}


// From fizzer - https://web.archive.org/web/20170610002747/http://amietia.com/lambertnotangent.html
float3 SampleHemisphereCosine(float3 n)
{
    float2 rnd = float2(rand(), rand());

    float a = PI* 2. * rnd.x;
    float b = 2.0 * rnd.y - 1.0;
    
    float3 dir = float3(sqrt(1.0-b*b)*float2(cos(a),sin(a)),b);
    return normalize(n + dir);
}

/*********Ray Hit **************/
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 emission;
    float roughness;
    float metallic;
    int type;
    int matid;

    //Physically-Based Shading at Disney
    float3 evalDisneyDiffuse(float NoL, float NoV, float LoH, float alpha) {
        float FD90 = 0.5 + 2. * alpha * pow(LoH,2.);
        float a = F_Schlick(1.,FD90, NoL);
        float b = F_Schlick(1.,FD90, NoV);
        
        return albedo * (a * b / PI);
    }
    float3 evalDisneySpecular(float3 F, float NoH, float NoV, float NoL) {
        float alpha = pow(roughness, 2.);
        float D = D_GTR(alpha, NoH,2.);
        float G = GeometryTerm(NoL, NoV, pow(0.5 + roughness *.5,2.));
    
        float3 spec = D*F*G / (4. * NoL * NoV);
        //both brdf and pdf contain D
        //Irregular lighting when D is incorporated both in nominator and denominator 
        //float3 spec = F*G / (4. * NoL * NoV);
        
        return spec;
    }


    float4 sampleDisneyBRDF(inout Ray ray) {
        float3 v = -ray.direction;
        float3 n = normal;
        float4 brdf;


        float3 l;
        float alpha = pow(roughness, 2.);

        // sample microfacet normal
        float3 t,b;
        basis(n,t,b);
        float3 V = toLocal(t,b,n,v);
        float3 h = SampleGGXVNDF(V, alpha, alpha, rand(), rand());
        if (h.z < 0.0)
            h = -h;
        h = toWorld(t,b,n,h);



        // fresnel
        //The Fresnel equation describes the ratio of light that gets reflected over the light that gets refracted
        //A base reflectivity of 0.04 holds for most dielectrics
        //albedo stores the base reflectivity if that texel is metallic
        //the color of the surface if it's not metal
        float3 f0 = lerp(float3(0.04, 0.04, 0.04), albedo, metallic);
        float3 F = F_Schlick(f0, dot(v,h));
    
        //weight probability
        float diffW = (1.- metallic);
        float specW = luma(F);
        float invW = 1./(diffW + specW);
        diffW *= invW;
        specW *= invW;


        float rnd = rand();
        if(rnd < diffW) // diffuse
        {

            l = SampleHemisphereCosine(n);
            h = normalize(l+v);
            
            float NoL = dot(n,l);
            float NoV = dot(n,v);
            if ( NoL <= 0.0 || NoV <= 0.0 ) {  return float4(0.,0,0,0); }
            float LoH = dot(l,h);
            //cos(theta) / PI
            NoL = clamp(NoL, 0.0, 1.0);
            float pdf = NoL/PI;
            //(1. - F) is the ratio of refraction 
            float3 diff = evalDisneyDiffuse(NoL, NoV, LoH, alpha) * (1.- F);
            brdf.rgb = diff * NoL;

            brdf.a = diffW * pdf;
        } 
       else // specular
       {
           l = reflect(-v,h);
           
           float NoL = dot(n,l);
           float NoV = dot(n,v);
           if ( NoL <= 0. || NoV <= 0. ) { return float4(0.,0,0,0); }
           float NoH = min(dot(n,h),.99);
           float pdf = GGXVNDFPdf(NoH, NoV, alpha);

           float3 spec = evalDisneySpecular(F, NoH, NoV, NoL);
           brdf.rgb = spec * clamp(NoL, 0.0, 1.0);
           brdf.a = specW * pdf;
       }

        ray.direction = l;
        return brdf;
    }
    float4 samplePhong(inout Ray ray)
    {

        float4 brdf = float4(0.0, 0.0, 0.0, 0.0);
        //grey scale
        float specChance = energy(specular);
        float diffChance = energy(albedo);

        float roulette = rand();

        //Monte Carlo, Russian Roulette     
        if (roulette < specChance)
        {
            // Specular reflection
            float alpha = SmoothnessToPhongAlpha(1.0 - roughness);
            ray.direction = reflect(ray.direction, normal);
            
            float f = (alpha + 2) / (alpha + 1);
            brdf.rgb = specular * sdot(normal, ray.direction, f);
            brdf.a = specChance;
        }
        else if (diffChance > 0 && roulette < specChance + diffChance)
        {
            // Diffuse reflection
            ray.direction = SampleHemisphereCosine(normal);
            brdf.rgb = albedo * dot(ray.direction, normal);
            brdf.a = diffChance / PI * dot(ray.direction, normal);
        }

        else
        {
            ray.energy = 0.0f;
        }

        return brdf;
    }


    float4 sampleDielectric(inout Ray ray){
        float4 brdf = float4(0, 0, 0, 0);
        float num = rand();
        float n = 1.f; 
        float probability;
        float3 normal2 = normal;
        float ior = 0.2;

        float cos = clamp(dot(ray.direction, normal), -1.f, 1.f);
        
        if (cos >= 0.f) {
            normal2 = -normal;
            n = ior;
            ior = 1.f;
        }
        else {
            cos = abs(cos);
        }

        float3 reflect_v = normalize(reflect(ray.direction, normal2));
        float x = n / ior;
        float sin = sqrt(max(0.f, 1.f - cos * cos));

        if (x * sin < 1.f) {
            //schlick equation
            probability = schlickEquation(ior, n, cos);

            if (num < probability) {
                ray.direction = reflect_v;
            }
            else{
                ray.direction = refract(ray.direction, normal2, x);
            }
        }
        else {
            ray.direction = reflect_v;
        }

        brdf = float4(specular, 1.0);
        return brdf;
    }

float4 sampleDielectric2(inout Ray ray){
        float3 n = normal;
        float3 wo = -ray.direction;
        float ior = 0.2;
        float pdfRefl = schlickEquation(ior, 1, dot(n, wo));
        float4 brdf = 0.0;
        brdf.rgb = albedo;

        if (rand() < pdfRefl) {
            ray.direction = reflect(-wo, n);
            brdf.a = 1.f;
        }
        else {
            bool result = refract(n, wo, ior, ray.direction);
            if (!result) {
                return brdf;
            }
            if (dot(n, wo) < 0) {
                ior = 1.f / ior;
            }
            brdf.rgb /= ior * ior;        
            brdf.a = 1.f;
        }
        return brdf;
    }

    float3 metallicWorkflowBSDF(float3 n, float3 wo, float3 wi) {
        float alpha = roughness * roughness;
        float3 h = normalize(wo + wi);
        
        float cosO = dot(n, wo);
        float cosI = dot(n, wi);
        if (cosI * cosO < 1e-7f) {
            return 0.0f;
        }
        float3 f0 = lerp(float3(0.04, 0.04, 0.04), albedo, metallic);
        float3 F = F_Schlick(f0, dot(wo,h));
        float G = smithG(cosO, cosI, alpha);
        float D = D_GTR(alpha, dot(n, h), 2);

        float3 spec = G * D / (4.f * cosI * cosO);
        return lerp(albedo / PI * (1.f - metallic), spec, F);
    }

    float metallicWorkflowPdf(float3 n, float3 wo, float3 wi) {
        float3 h = normalize(wo + wi);
        return lerp(satDot(n, wi) * PiInv,
            GTR2Pdf(n, h, wo, roughness * roughness) / (4.f * absDot(h, wo)),
            1.f / (2.f - metallic)
        );
    }

    float4 sampleMetallicWorkflow(inout Ray ray)
    {
        float4 brdf = float4(0, 0, 0, 0);
        float3 n = normal;
        float3 wo = -ray.direction;
        float3 r = float3(rand(), rand(), rand());

        float alpha = roughness * roughness;

        if (r.z > (1.f / (2.f - metallic))) {
            ray.direction = SampleHemisphereCosine(n);
        }
        else {
            float3 t,b;
            basis(n,t,b);
            float3 V = toLocal(t,b,n,wo);
            float3 h = SampleGGXVNDF(V, alpha, alpha, r.x, r.y);
            if (h.z < 0.0)
                h = -h;
            h = toWorld(t,b,n,h);
            ray.direction = -reflect(wo, h);
        }

        if (dot(n, ray.direction) >= 0.f) {
            brdf.rgb = metallicWorkflowBSDF(n, wo, ray.direction);
            brdf.a = metallicWorkflowPdf(n, wo, ray.direction);
        }
        return brdf;
    }

};
RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.emission = float3(0.0f,0.0f,0.0f);
    hit.roughness = 0.5;
    hit.metallic = 0.8;
    hit.type = 0;
    hit.matid = -1;
    return hit;
}




/*=============Supported Object Geometries================*/
struct Sphere {
    float3 center;
    float radius;
    float3 albedo;
    float3 specular;
    float3 emission;
    float  roughness;
    float metallic;
    int matid;
    int type;

};


// scene objects
float3 _GroundAlbedo;
float3 _GroundSpecular;
float3 _GroundEmission;
StructuredBuffer<Sphere> _Spheres;
const int _NumSpheres;

// Triangle meshes
StructuredBuffer<float3> _Vertices;
StructuredBuffer<float3> _Normals;
StructuredBuffer<int> _Indices;
StructuredBuffer<int> _MatIndices;
const int _NumIndices;

struct TriMeshMaterial {
    float3 albedo, specular, emission;
    float  roughness;
    float metallic;
    int matid;
    int  type;
    
};
StructuredBuffer<TriMeshMaterial> _TriMeshMats;

// BVH
struct BVH_Node {
    float3 bot, top; // BBox
    int leftOrCount;  // if leaf, number of tri indices. Else index of left child
    int rightOrOffset; // if leaf, offset into indices buffer. Else index of right child
    int isLeaf;
};
StructuredBuffer<BVH_Node> _BVH_Nodes;
static const uint MAX_BVH_DEPTH = 64; // max array size for doing depth-first traversal of BVH
const int _BVHSize;

/*********Light Source**************/
struct LightSource
{
    float3 position;
    float3 normal;
    float s1;
    float s2;
    void CreateLightSource()
    {
        position = float3(-2.25, 89.55, 0);
        normal = float3(0, -1, 0);
        s1 = 1 * 45;
        s2 = 0.75 * 45;
    }

    float3 SampleLight()
    {
        float x = rand() * 0.5 - 0.5;
        float z = rand() * 0.5 - 0.5;
        return position + float3(s1 * x, 0, s2 * z);
    }
    /*
    p(w) = dist^2 / (cos(theta) * A)
    pdf = 1/A
    */
    float GetLightPdf(float3 x, float3 y)
    {
        float invA = 1.0 / (s1 * s2);
        float3 yx = x - y;
        return invA * dot(yx, yx) / absDot(normal, normalize(yx));
    }

};

/*=======Ray=======*/


Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    // retrieve the translation column (shearing in homo space)
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    // Depth is not important here because what we need is a direction instead of precise position !
    // we presume no different scales on x/y axis 
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}
 


Ray CreatePhysicalCameraRay(float2 uv)
{
    uint width, height;
    DirectIllumination.GetDimensions(width, height);

    float2 r = float2(rand(),rand());

    float2 pAperture = toConcentricDisk(r.x, r.y);
    //float2 pAperture = r.xy;
	float3 pLens = float3(pAperture * aperture_radius, 0.f);

	float3 origin = mul(_CameraToWorld, float4(pLens, 1.0f) ).xyz;

    float3 camera_position = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    //float3 view = normalize(mul(_CameraToWorld, float4(0.0f, 0.0f, -1.0f, 1.0f)).xyz);
    //float3 right = normalize(mul(_CameraToWorld, float4(1.0f, 0.0f, 0.0f, 1.0f)).xyz);
    //float3 up = normalize(mul(_CameraToWorld, float4(0.0f, 1.0f, 0.0f, 1.0f)).xyz);
    //float3 pFocusPoint = camera_position + (view + up * uv.y + right * uv.x) * 20;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = normalize(mul(_CameraToWorld, float4(direction, 0.0f)).xyz);
    
    return CreateRay(origin, normalize(direction * focal_length + camera_position - origin));
}



/*=============Intersection Functions================*/
// sphere defined as (x, y, z, radius)
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    // ref: https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection
    float3 d = ray.origin - sphere.center;  // direction from ray origin to sphere
    float b = dot(ray.direction, d);
    float c = dot(d, d) - (sphere.radius * sphere.radius);

    // evaluate quadratic determinant
    float det_squared = (b*b) - c;
    if (det_squared < 0)
        return;  // no real solutions
    float det = sqrt(det_squared);
    float t = -b - det; 
    if (t < 0)
        t = -b + det;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.center);
        bestHit.specular = sphere.specular;
        bestHit.albedo = sphere.albedo;
        bestHit.emission = sphere.emission;
        bestHit.roughness = sphere.roughness;
        bestHit.metallic = sphere.metallic;
        bestHit.type = sphere.type;
        bestHit.matid = sphere.matid;
    }
}

// TODO: change to generic plane isection test
void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);

        bestHit.albedo = _GroundAlbedo;
        bestHit.specular = _GroundSpecular;
        bestHit.emission = _GroundEmission;
        bestHit.metallic = 0.2;
        bestHit.roughness = 0.8;
        bestHit.matid    = 1000;
    }
}

struct Trisect {
    float t;
    float u;
    float v;
};

Trisect CreateTrisect() {
    Trisect T;
    T.t = 1.#INF;
    T.u = -1;
    T.v = -1;
    return T;
}

// Ref https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle
// Möller-Trumbore algorithm
bool Trisection(Ray ray, float3 v0, float3 v1, float3 v2,
    inout Trisect T)
{
    float3 v0v1 = v1 - v0;
    float3 v0v2 = v2 - v0;
    
    float3 pvec = cross(ray.direction, v0v2);
    float det = dot(v0v1, pvec);
    // culling
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;

    float3 tvec = ray.origin - v0;

    // U
    float u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f) return false;

    // V
    float3 qvec = cross(tvec, v0v1);
    float v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f) return false;

    // t
    float t = dot(v0v2, qvec) * inv_det;
    if (t > 0) {
        T.t = t;
        T.u = u;
        T.v = v;
        return true;
    }
    return false;
}

//void IntersectAllTris(Ray ray, inout RayHit bestHit) {
//    for (int i = 0; i < _NumIndices; i += 3) {
//        float3
//            v0 = _Vertices[_Indices[i]],
//            v1 = _Vertices[_Indices[i+1]],
//            v2 = _Vertices[_Indices[i+2]],
//            n0 = _Normals[_Indices[i]],
//            n1 = _Normals[_Indices[i+1]],
//            n2 = _Normals[_Indices[i+2]];
//            
//
//        Trisect tri = CreateTrisect();
//        if (Trisection(ray, v0, v1, v2, tri)) {
//            if (tri.t > bestHit.distance)
//                continue;
//
//            bestHit.distance = tri.t;
//            bestHit.position = ray.origin + tri.t * ray.direction;
//
//            // TODO: use UV to interpolate normals
//            float w = 1 - tri.u - tri.v;
//            bestHit.normal = (tri.u*n1) + (tri.v * n2) + (w * n0);
//            
//            // get mesh mat
//            TriMeshMaterial triMat = _TriMeshMats[_MatIndices[i]];
//            bestHit.albedo = triMat.albedo;
//            bestHit.specular = triMat.specular;
//            bestHit.emission = triMat.emission;
//            bestHit.type = triMat.type;
//        }
//    }
//}

// ref: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection
bool IntersectAABB(Ray r, float3 bot, float3 top, inout float2 t) {
    float tmin, tmax, tymin, tymax, tzmin, tzmax, tmp;

    tmin = (bot.x - r.origin.x) * r.invDir.x;
    tmax = (top.x - r.origin.x) * r.invDir.x;
    if (tmin > tmax) { // swap
        tmp = tmin; tmin = tmax; tmax = tmp;
    }
    tymin = (bot.y - r.origin.y) * r.invDir.y;
    tymax = (top.y - r.origin.y) * r.invDir.y;
    if (tymin > tymax) { // swap
        tmp = tymin; tymin = tymax; tymax = tmp;
    }

    if ((tmin > tymax) || (tymin > tmax))  // miss
        return false;
    tmin = max(tmin, tymin);
    tmax = min(tmax, tymax);

    tzmin = (bot.z - r.origin.z) * r.invDir.z;
    tzmax = (top.z - r.origin.z) * r.invDir.z;
    if (tzmin > tzmax) { // swap
        tmp = tzmin; tzmin = tzmax; tzmax = tmp;
    }

    if ((tmin > tzmax) || (tzmin > tmax))  // miss
        return false;
    tmin = max(tmin, tzmin);
    tmax = min(tmax, tzmax);

    t = float2(tmin, tmax);
    return true;
}

void IntersectBVH(Ray ray, inout RayHit bestHit) {
    int nodeStack[MAX_BVH_DEPTH];  // stack for performing BVH Traversal
    int stackTop = 0;

    nodeStack[0] = 0; // place root node on stack
    int counter = 0;

    while (stackTop >= 0) {  // assume ray intersects bbox of curnode
        if (counter++ > _BVHSize) return;
        
        BVH_Node node = _BVH_Nodes[nodeStack[stackTop--]]; // pop top node off stack

        float2 bbox_ts = float2(1.#INF, 1.#INF);
        bool isectBBox = IntersectAABB(ray, node.bot, node.top, bbox_ts);

        if (!isectBBox || bbox_ts.x > bestHit.distance)
            continue; // doesn't intersect current node, or hit is farther than closest. skip.

        if (node.isLeaf == 1) { // leaf node
            int indexCount = node.leftOrCount;
            int indexOff = node.rightOrOffset;
            for (int i = indexOff; i < (indexOff + indexCount); i += 3) {
                if (i < 0 || i > _NumIndices - 3) {
                    return;
                }
                float3
                    v0 = _Vertices[_Indices[i]],
                    v1 = _Vertices[_Indices[i+1]],
                    v2 = _Vertices[_Indices[i+2]],
                    n0 = _Normals[_Indices[i]],
                    n1 = _Normals[_Indices[i+1]],
                    n2 = _Normals[_Indices[i+2]];

                Trisect tri = CreateTrisect();
                if (Trisection(ray, v0, v1, v2, tri)) {
                    if (tri.t > 0 && tri.t < bestHit.distance)
                    {
                        bestHit.distance = tri.t;
                        bestHit.position = ray.origin + tri.t * ray.direction;

                        // interpolate normals
                        float w = 1 - tri.u - tri.v;
                        bestHit.normal = (tri.u*n1) + (tri.v * n2) + (w * n0);

                        // get mesh mat
                        TriMeshMaterial triMat = _TriMeshMats[_MatIndices[i]];
                        bestHit.albedo = triMat.albedo;
                        bestHit.specular = triMat.specular;
                        bestHit.emission = triMat.emission;
                        bestHit.matid = triMat.matid;
                        bestHit.type = triMat.type;
                        bestHit.metallic = triMat.metallic;
                        bestHit.roughness = triMat.roughness;
                    }
                }
            }
        } else { // inner node
            if (stackTop + 1 >= MAX_BVH_DEPTH) return;
            int leftIndex = node.leftOrCount;
            int rightIndex = node.rightOrOffset;

            // push nodes onto stack. traverse left branches first
            nodeStack[++stackTop] = rightIndex; 
            nodeStack[++stackTop] = leftIndex; 
        }
    }
}


RayHit Trace(Ray ray, int count) 
{
    RayHit bestHit = CreateRayHit();
    //IntersectGroundPlane(ray, bestHit);

    // loop over all spheres
    for (int i = 0; i < _NumSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);

    IntersectBVH(ray, bestHit);
    if(need_gbuffer == 1 && count == 0 && bestHit.distance < 1.#INF){
        uint width, height;
        DirectIllumination.GetDimensions(width, height);
        float4 lastScreenPos = mul(_LastVP, float4(bestHit.position, 1.0));
        lastScreenPos /= lastScreenPos.w;


        GbufferPosition[pixel] = float4(bestHit.position, 1.0);
        GbufferNormal[pixel] = float4(bestHit.normal, bestHit.matid);
        GbufferAlbedo[pixel] = float4(bestHit.albedo.rgb, 1.0);
        GbufferMotion[pixel] = float4((lastScreenPos.xy + 1.0) * 0.5, -(lastScreenPos.xy + 1.0) * 0.5 + pixel / float2(width, height));
    }

    return bestHit;
}



float4 Shade(inout Ray ray, inout RayHit hit)
{
    //if (hit.distance < 1.#INF)
    {
        float4 brdf;
        switch (hit.type) {
        case 0:
            brdf = hit.samplePhong(ray);
            break;
        //case 1:
        //    brdf = hit.sampleDisneyBRDF(ray);
        //    break;
        case 1:
            brdf = hit.sampleMetallicWorkflow(ray);
            break;
        case 2:
            brdf = hit.sampleDielectric2(ray);
            break;
        default:
            ray.energy *= 0;
            return float4(0.,0,0,0);
        }

        if((hit.type < 3 && dot(ray.direction, hit.normal) <= 0.0f) || brdf.a < 0.0000001f)
        {
           ray.energy = float3(0.0f, 0.0f, 0.0f);
           return 0.0f;
        }

        //ray.energy *= brdf.rgb / brdf.a;
		ray.origin = hit.position + ray.direction * 0.001f;
        return brdf;
    }
}



void WriteResult(uint2 id, float3 direct, float3 indirect)
{
    //float3 result = pow(color, 1.0/2.2);
    //HDR to LDR
    direct = direct / (direct + 1.0);
    DirectIllumination[id.xy] = float4(direct, 1);

    indirect = indirect / (indirect + 1.0);
    IndirectIllumination[id.xy] = float4(indirect, 1);
}




[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    pixel = id.xy;
    // Get the dimensions of the RenderTexture
    uint width, height;
    DirectIllumination.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    // jittered ray sample, random(0-1, 0-1)
    
    float2 uv = float2((id.xy + _JitterOffset) / float2(width, height) * 2.0f - 1.0f);
    
    float2 uv_unjitter = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

    if(need_gbuffer == 1)
    {
        GbufferPosition[pixel] = float4(0, 0, 0, 0);
        GbufferNormal[pixel] = float4(0, 0, 0, 0);
        GbufferAlbedo[pixel] = float4(0, 0, 0, 0);
        GbufferMotion[pixel] = float4(0, 0, 0, 0);
    }
    //unjittered ray for Gbuffer
    Ray oriRayUnjitter = CreateCameraRay(uv_unjitter);
    oriRayUnjitter.invDir = 1.0f / oriRayUnjitter.direction;
    RayHit gbufferHit = Trace(oriRayUnjitter, 0);


    // Get a ray from the UVs
    Ray oriRay = CreateCameraRay(uv);
    //Ray ray = CreatePhysicalCameraRay(uv);  
    // update ray invDir (for AABB test)
    oriRay.invDir = 1.0f / oriRay.direction;

    LightSource _LightSource;
    _LightSource.CreateLightSource();

    // Path Trace and shade
    float3 direct = float3(0, 0, 0);
    float3 indirect = float3(0, 0, 0);

    Ray ray = oriRay;
    RayHit firstHit = Trace(ray, 1);
    //hit nothing
    if (!(firstHit.distance < 1.#INF)){
        WriteResult(id.xy , direct, indirect);
        return;
        // Sample the skybox and write it
    //    float theta = acos(ray.direction.y) / -PI;
    //    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    //    float3 emission = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    //    return WriteResult(result + energy * emission);
    }
    //hit a light
    if(energy(firstHit.emission) > 0.0f){
        WriteResult(id.xy, direct, clamp(firstHit.emission, 0, 1));
        return;  
    }
    RayHit hit = firstHit;
    for (int i = 1; i < _MaxReflections/* max bounce */; i++)
    {
        if(hit.type == 2) break;
        
        float3 lightPosition = _LightSource.SampleLight();
        float lightPdf = _LightSource.GetLightPdf(hit.position, lightPosition);
        float3 lightdir = normalize(lightPosition - hit.position);

        float3 bsdf = hit.metallicWorkflowBSDF(hit.normal, -ray.direction, lightdir) ;
        float pdf = hit.metallicWorkflowPdf(hit.normal, -ray.direction, lightdir) ;
        ray.direction = normalize(lightPosition - hit.position);
        ray.energy *= (bsdf.rgb) * satDot(hit.normal, ray.direction) / (lightPdf + pdf) * 2;
        ray.origin = hit.position + ray.direction * 0.001f;
        ray.invDir = 1.0f / ray.direction;

        //next hit
        hit = Trace(ray, i);

        //hit nothing
        if (!(hit.distance < 1.#INF)){
            break;
        }
        //hit a light
        if(energy(hit.emission) > 0.0f && dot(hit.normal, float3(0, -1, 0)) > 0.0 )
        {
            if(i == 1)
                direct += ray.energy * hit.emission;
            else
                indirect += ray.energy * hit.emission;
            break;
        }
    }

    ray = oriRay;
    hit = firstHit;
    for (int i = 1; i < _MaxReflections/* max bounce */; i++)
    {
        if(dot(hit.normal, -ray.direction) <= 0.0)
        {
            break;
        }
        float4 brdf = Shade(ray, hit);
        if (!any(brdf) || !any(ray.energy) || brdf.a < 1e-8 || dot(hit.normal, ray.direction) <= 0.0)
        {
            break;
        }
         
    
        float pdf = brdf.a;
        ray.invDir = 1.0f / ray.direction;
        Ray test_ray = ray;
        RayHit test_hit = Trace(test_ray, i);
        float lightpdf = 0.0; 
        if(hit.type != 2){ 
            if(test_hit.distance < 1.#INF && energy(test_hit.emission) > 0.0 && dot(test_hit.normal,float3(0, -1, 0)) > 0.9 )
            {
                lightpdf = _LightSource.GetLightPdf(hit.position, test_hit.position);
            }
            ray.energy = ray.energy * brdf.rgb * (hit.type != 2 ? satDot(hit.normal, ray.direction) : 1) / pdf * 2.0;
        
        }
        else
            ray.energy = ray.energy * brdf.rgb / pdf * 2;
              
        //next hit
        hit = test_hit;
      
        //hit nothing
        if (!(hit.distance < 1.#INF)){
            //if (_SkyboxEnabled == 0)
            //WriteResult(id.xy , result);
            break;
    
            // Sample the skybox and write it
        //    float theta = acos(ray.direction.y) / -PI;
        //    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        //    float3 emission = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        //    return WriteResult(result + energy * emission);
        }
        //hit a light
        if(energy(hit.emission) > 0.0f && dot(hit.normal,float3(0, -1, 0)) > 0.99)
        {
            if(i == 1)
                direct += ray.energy * hit.emission;
            else
                indirect += ray.energy * hit.emission;
            break;
        }
    }
 // for (int i = 1; i < 0 /* max bounce */; i++)
 // {
 //     //multiply throughput at current ray path with emission
 //     //Rendering Equation
 //     if(hit.type != 2)
 //     {
 //         float3 lightCenter = float3(-283.8, -1.35, -238.9);
 //         float2 lightSize = float2(50, 75);
 //         float3 lightPosition = SampleLight(lightCenter, lightSize);
 //         float lightPdf = GetLightPdf(1.0/(50 * 75.0), hit.position, lightPosition, float3(0, -1, 0));
 //         if (lightPdf > 0) {
 //              float3 lightdir = lightPosition - hit.position;
 // 
 //              float3 bsdf = hit.metallicWorkflowBSDF(hit.normal, -ray.direction, lightdir) ;
 //              float pdf = hit.metallicWorkflowPdf(hit.normal, -ray.direction, lightdir) ;
 //              float3 lightEmission = float3(3,3,3) * 4;
 //              
 //              result = result + ray.energy * lightEmission * bsdf.rgb * satDot(hit.normal, normalize(lightPosition - hit.position)) / lightPdf * powerHeuristic(lightPdf, pdf);
 //              
 //         }
 //      
 //     }
 //     float4 brdf = Shade(ray, hit);
 //     //Invalid shading
 //     if (!any(brdf) || !any(ray.energy) || brdf.a < 1e-7)
 //     {
 //         break;
 //     }
 //     float3 curpos = hit.position; 
 //
 //     
 //     //Go for another hit
 //     bool isDialectic = (hit.type == 2);
 //     ray.energy *= brdf.rgb / brdf.a * (isDialectic ? 1.f : absDot(hit.normal, ray.direction));
 //
 //     ray.invDir = 1.0f / ray.direction;
 //     hit = Trace(ray, i);
 //
 //     if (!(hit.distance < 1.#INF)){
 //         break;
 //     }
 //     if(energy(hit.emission) > 0.0f){
 //         float3 emission = hit.emission;
 //         float lightPdf = GetLightPdf( 1.0/(100.0 * 150.0), curpos, hit.position, hit.normal);
 //
//		float weight = isDialectic ? 1 : powerHeuristic(brdf.a, lightPdf);
//		result += hit.emission * ray.energy * weight;
 //         break;
 //     }
 //     
 // }
  WriteResult(pixel, direct, indirect);
  return;
}
 