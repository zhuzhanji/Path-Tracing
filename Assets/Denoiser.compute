// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// GBuffer
//Texture2D<float4> _NormalTexture;
//SamplerState sampler_NormalTexture;
RWTexture2D<float4> _NormalTexture;

//Texture2D<float4> _PositionTexture;
//SamplerState sampler_PositionTexture;
RWTexture2D<float4> _PositionTexture;

//Texture2D<float4> _RayTracingTexture;
//SamplerState sampler_RayTracingTexture;
RWTexture2D<float4> _RayTracingTexture;

int level;
float p_phi;
float n_phi;
float c_phi;

float3 ewaDenoiser(uint2 uv0, float2 resolution)
{
        // A_Trous kernel
        float Gaussian55[5][5] = {
	        {.0030f, .0133f, .0219f, .0133f, .0030f },
	        { .0133f, .0596f, .0983f, .0596f, .0133f },
	        { .0219f, .0983f, .1621f, .0983f, .0219f },
	        { .0133f, .0596f, .0983f, .0596f, .0133f },
	        { .0030f, .0133f, .0219f, .0133f, .0030f }
        };


        float3 sum = float3(0.f, 0.f, 0.f);
        float3 c_val = _RayTracingTexture[uv0].xyz;
        float4 n_val = _NormalTexture[uv0].xyzw;
        float3 p_val = _PositionTexture[uv0].xyz;
        int x = uv0.x;
        int y = uv0.y;
        int primIdP = n_val.w;
        if(dot(n_val, n_val) < 0.001) return c_val;

        int step_width = 1 << level;

        
        float cum_w = 0.f;
        // Traverse all neighbors
        for (int v = -2; v <= 2; v++) {
            for (int u = -2; u <= 2; u++) {
                // Coordinates of neighbor, changing for different iterations
                int qx = x + u * step_width;
				int qy = y + v * step_width;

				if (qx >= resolution.x || qy >= resolution.y ||
					qx < 0 || qy < 0) {
					continue;
				}
                int2 uv = int2(qx, qy);

                // Color of neighbor
                float3 c_tmp = _RayTracingTexture[uv].xyz;
         //
         //       // Weight for rt buffer
         //       float dist = distance(c_val, c_tmp);
         //       float c_w = min(exp(-dist / (c_phi * c_phi)), 1.f);
         //
         //       // Weight for normal buffer
                float4 n_tmp = _NormalTexture[uv].xyzw;
                int primIdQ = n_tmp.w;
                
                if (primIdQ <= 0 || primIdQ != primIdP) {
				    continue;
			}
         //       dist = max(distance(n_val, n_tmp) / (step_width * step_width), 0.f);
         //       float n_w = min(exp(-dist / (n_phi * n_phi)), 1.f);
         //
         //       // Weight for position buffer
                float3 p_tmp = _PositionTexture[uv].xyz;
         //       dist = distance(p_val, p_tmp);
         //       float p_w = min(exp(-dist / (p_phi * p_phi)), 1.f);
         //
			float dist = dot(c_val - c_tmp, c_val - c_tmp);
			float c_w = min(1.f, exp(-dist / c_phi));

			dist  = dot(n_val.xyz - n_tmp.xyz, n_val.xyz - n_tmp.xyz) / (step_width * step_width);
			float n_w = min(1.f, exp(-dist / n_phi));

			dist = dot(p_val - p_tmp, p_val - p_tmp);
			float p_w = min(1.f, exp(-dist / p_phi));


                // Filter value at corresponding position
                float f_val = Gaussian55[u+2][v+2];

                // Add contribution and normalize result
                sum += c_tmp * f_val * c_w * n_w * p_w;
                cum_w += f_val * c_w * n_w * p_w;

                // Filter without edge-avoiding
                //sum += c_tmp * f_val * c_w* p_w;
                //cum_w += f_val * c_w* p_w;
            }
        }

        return cum_w < 1e-7 ? c_val : sum / cum_w;
}



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint2 pixel = id.xy;
	uint width, height;
    Result.GetDimensions(width, height);

    float3 result = ewaDenoiser(pixel, float2(width, height));


    Result[id.xy] = float4(result, 1);
}
